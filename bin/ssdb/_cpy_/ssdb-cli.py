# encoding=utf-8
# Generated by cpy
# 2022-12-26 09:21:00.392550
import os, sys
from sys import stdin, stdout

import thread
import re
import time
import socket
import getopt
import shlex
import datetime
#### start cpy import ###
from engine import CpyEngine
cpy = CpyEngine()
dstfile = cpy.compile('/tmp/gbc/bin/ssdb/ssdb_cli/exporter.cpy', 'ssdb_cli', '/tmp/gbc/bin/ssdb/_cpy_/ssdb_cli')
#### end cpy import ###
#### start cpy import ###
from engine import CpyEngine
cpy = CpyEngine()
dstfile = cpy.compile('/tmp/gbc/bin/ssdb/ssdb_cli/importer.cpy', 'ssdb_cli', '/tmp/gbc/bin/ssdb/_cpy_/ssdb_cli')
#### end cpy import ###
#### start cpy import ###
from engine import CpyEngine
cpy = CpyEngine()
dstfile = cpy.compile('/tmp/gbc/bin/ssdb/ssdb_cli/util.cpy', 'ssdb_cli', '/tmp/gbc/bin/ssdb/_cpy_/ssdb_cli')
#### end cpy import ###
#### start cpy import ###
from engine import CpyEngine
cpy = CpyEngine()
dstfile = cpy.compile('/tmp/gbc/bin/ssdb/ssdb_cli/flushdb.cpy', 'ssdb_cli', '/tmp/gbc/bin/ssdb/_cpy_/ssdb_cli')
#### end cpy import ###
#### start cpy import ###
from engine import CpyEngine
cpy = CpyEngine()
dstfile = cpy.compile('/tmp/gbc/bin/ssdb/ssdb_cli/cluster.cpy', 'ssdb_cli', '/tmp/gbc/bin/ssdb/_cpy_/ssdb_cli')
#### end cpy import ###
#### start cpy import ###
from engine import CpyEngine
cpy = CpyEngine()
dstfile = cpy.compile('/tmp/gbc/bin/ssdb/ssdb_cli/nagios.cpy', 'ssdb_cli', '/tmp/gbc/bin/ssdb/_cpy_/ssdb_cli')
#### end cpy import ###
from ssdb_cli import exporter
from ssdb_cli import importer
from ssdb_cli import util
from ssdb_cli import flushdb
from ssdb_cli import cluster
from ssdb_cli import nagios
sys.path.append('./api/python')
sys.path.append('../api/python')
sys.path.append('/usr/local/ssdb/api/python')
from SSDB import *

def save_cli_history(histfile):
	pass
	readline.set_history_length(1000)
	readline.write_history_file(histfile)
	sys.stderr.write('\n')
try:
	pass
	import readline
	import atexit
	histfile = os.path.expanduser('~/.ssdb-cli_history')

	if os.path.isfile(histfile):
		pass
		readline.read_history_file(histfile)
	atexit.register(save_cli_history, histfile)
except Exception , e:
	pass
	sys.stderr.write((('readline: ' + str(e)) + '\n'))
escape_data = False

def welcome():
	pass
	sys.stderr.write('ssdb (cli) - ssdb command line tool.\n')
	sys.stderr.write('Copyright (c) 2012-2016 ssdb.io\n')
	sys.stderr.write('\n')
	sys.stderr.write("'h' or 'help' for help, 'q' to quit.\n")
	sys.stderr.write('\n')

def show_command_help():
	pass
	print ''
	print '# display ssdb-server status'
	print '	info'
	print '# escape/do not escape response data'
	print '	: escape yes|no'
	print '# export/import'
	print '	export [-i] out_file'
	print '		-i	interactive mode'
	print '	import in_file'
	print ''
	print 'see http://ssdb.io/docs/php/ for commands details'
	print ''
	print 'press \'q\' and Enter to quit.'
	print ''

def usage():
	pass
	print 'Usage:'
	print '        ssdb-cli [-h] <host> [-p] <port>'
	print ''
	print 'Options:'
	print '  -h <host>      ssdb server hostname/ip address (default: 127.0.0.1)'
	print '  -p <port>      ssdb server port (default: 8888)'
	print '  -a <password>  Password to use when connecting to the server'
	print '  -v             Show this message'
	print '  --help         Show this message'
	print ''
	print '  -n <opt>       Choose nagios probe'
	print '                 opt: info, dbsize, replication, write_read'
	print '  -w <INT>       Set nagios WARN level'
	print '  -c <INT>       Set nagios CRITICAL level'
	print ''
	print 'Examples:'
	print '  ssdb-cli'
	print '  ssdb-cli 8888'
	print '  ssdb-cli 127.0.0.1 8888'
	print '  ssdb-cli -h 127.0.0.1 -p 8888'
	print '  ssdb-cli -h 127.0.0.1 -p 8888 -a xxxpasswordxxx'

def repr_data(s):
	pass
	s = str(s)
	gs = globals()

	if gs['escape_data']==False:
		pass
		return s
	ret = s.encode('string-escape')
	return ret

def timespan(stime):
	pass
	etime = datetime.datetime.now()
	ts = (etime - stime)
	time_consume = (ts.seconds + ts.microseconds / 1000000.)
	return time_consume
host = ''
port = ''
opt = ''
args = []
run_nagios = False
password = False

_cpy_r_0 = _cpy_l_1 = sys.argv[1 : ]
if type(_cpy_r_0).__name__ == 'dict': _cpy_b_3=True; _cpy_l_1=_cpy_r_0.iterkeys()
else: _cpy_b_3=False;
for _cpy_k_2 in _cpy_l_1:
	if _cpy_b_3: arg=_cpy_r_0[_cpy_k_2]
	else: arg=_cpy_k_2
	pass

	if opt=='' and arg.startswith('-'):
		pass
		opt = arg

		if ((arg=='--help' or arg=='--h') or arg=='-v'):
			pass
			usage()
			exit(0)
	else:
		pass

		# {{{ switch: opt
		_continue_1 = False
		while True:
			if False or ((opt) == '-h'):
				pass
				host = arg
				opt = ''
				break
			if False or ((opt) == '-p'):
				pass
				port = arg
				opt = ''
				break
			if False or ((opt) == '-a'):
				pass
				password = arg
				opt = ''
				break
			if False or ((opt) == '-n') or ((opt) == '-w') or ((opt) == '-c'):
				pass
				run_nagios = True
				opt = ''
				break
			### default
			args.append(arg)
			break
			break
			if _continue_1:
				continue
		# }}} switch


if host=='':
	pass
	host = '127.0.0.1'

	_cpy_r_4 = _cpy_l_5 = args
	if type(_cpy_r_4).__name__ == 'dict': _cpy_b_7=True; _cpy_l_5=_cpy_r_4.iterkeys()
	else: _cpy_b_7=False;
	for _cpy_k_6 in _cpy_l_5:
		if _cpy_b_7: arg=_cpy_r_4[_cpy_k_6]
		else: arg=_cpy_k_6
		pass

		if not (re.match('^[0-9]+$', arg)):
			pass
			host = arg
			break

if port=='':
	pass
	port = '8888'

	_cpy_r_8 = _cpy_l_9 = args
	if type(_cpy_r_8).__name__ == 'dict': _cpy_b_11=True; _cpy_l_9=_cpy_r_8.iterkeys()
	else: _cpy_b_11=False;
	for _cpy_k_10 in _cpy_l_9:
		if _cpy_b_11: arg=_cpy_r_8[_cpy_k_10]
		else: arg=_cpy_k_10
		pass

		if re.match('^[0-9]+$', arg):
			pass
			port = arg
			break
try:
	pass
	port = int(port)
except Exception , e:
	pass
	sys.stderr.write('Invalid argument port: '%(port))
	usage()
	sys.exit(0)
try:
	pass
	link = SSDB(host, port)
except socket.error , e:
	pass
	sys.stderr.write('Failed to connect to: %s:%d\n'%(host, port))
	sys.stderr.write('Connection error: %s\n'%(str(e)))

	if run_nagios:
		pass
		sys.stdout.write('CRITICAL: Failed to connect\n'%())
		sys.exit(2)
	else:
		pass
		sys.exit(0)

if run_nagios:
	pass
	nagios.run(link, sys.argv[1 : ])
	exit(0)

if password:
	pass
	resp = link.request('auth', [password])
welcome()

if sys.stdin.isatty():
	pass
	util.show_version(link)

def request_with_retry(cmd, args=None):
	pass
	gs = globals()
	link = gs['link']
	password = gs['password']

	if not (args):
		pass
		args = []
	retry = 0
	max_retry = 5

	while True:
		pass
		resp = link.request(cmd, args)

		if resp.code=='disconnected':
			pass
			link.close()
			sleep = retry

			if sleep>3:
				pass
				sleep = 3
			time.sleep(sleep)
			retry += 1

			if retry>max_retry:
				pass
				sys.stderr.write('cannot connect to server, give up...\n')
				break
			sys.stderr.write('[%d/%d] reconnecting to server... '%(retry, max_retry))
			try:
				pass
				link = SSDB(host, port)
				gs['link'] = link
				sys.stderr.write('done.\n')
			except socket.error , e:
				pass
				sys.stderr.write('Connect error: %s\n'%(str(e)))
				continue

			if password:
				pass
				ret = link.request('auth', [password])
		else:
			pass
			return resp
	return None

while True:
	pass
	line = ''
	c = 'ssdb %s:%s> '%(host, str(port))
	b = sys.stdout
	sys.stdout = sys.stderr
	try:
		pass
		line = raw_input(c)
	except Exception , e:
		pass
		break
	sys.stdout = b

	if line=='':
		pass
		continue
	line = line.strip()

	if (line=='q' or line=='quit'):
		pass
		sys.stderr.write('bye.\n')
		break

	if (line=='h' or line=='help'):
		pass
		show_command_help()
		continue
	try:
		pass
		ps = shlex.split(line)
	except Exception , e:
		pass
		sys.stderr.write('error: %s\n'%(str(e)))
		continue

	if len(ps)==0:
		pass
		continue
	i = 0

	while i<len(ps):
		pass
		ps[i] = ps[i].decode('string-escape')
		pass
		i += 1
	cmd = ps[0].lower()

	if cmd.startswith(':'):
		pass
		ps[0] = cmd[1 : ]
		cmd = ':'
		args = ps
	else:
		pass
		args = ps[1 : ]

	if cmd==':':
		pass
		op = ''

		if len(args)>0:
			pass
			op = args[0]

		if op!='escape':
			pass
			sys.stderr.write("Bad setting!\n")
			continue
		yn = 'yes'

		if len(args)>1:
			pass
			yn = args[1]
		gs = globals()

		if yn=='yes':
			pass
			gs['escape_data'] = True
			sys.stderr.write("  Escape response\n")
		elif (yn=='no' or yn=='none'):
			pass
			gs['escape_data'] = False
			sys.stderr.write("  No escape response\n")
		else:
			pass
			sys.stderr.write("  Usage: escape yes|no\n")
		continue

	if cmd=='v':
		pass
		util.show_version(link)
		continue

	if cmd=='auth':
		pass

		if len(args)==0:
			pass
			sys.stderr.write('Usage: auth password\n')
			continue
		password = args[0]

	if cmd=='export':
		pass
		exporter.run(link, args)
		continue

	if cmd=='import':
		pass

		if len(args)<1:
			pass
			sys.stderr.write('Usage: import in_file\n')
			continue
		filename = args[0]
		importer.run(link, filename)
		continue
	try:
		pass

		if cmd=='flushdb':
			pass
			resp = request_with_retry('ping')

			if not (resp):
				pass
				raise Exception('error')

			if resp.code!='ok':
				pass
				raise Exception(resp.message)
			stime = datetime.datetime.now()

			if len(args)==0:
				pass
				flushdb.flushdb(link, '')
			else:
				pass
				flushdb.flushdb(link, args[0])
			sys.stderr.write('(%.3f sec)\n'%(timespan(stime)))
			continue
	except Exception , e:
		pass
		sys.stderr.write((("error! - " + str(e)) + "\n"))
		continue
	stime = datetime.datetime.now()
	resp = request_with_retry(cmd, args)

	if resp==None:
		pass
		sys.stderr.write("error!\n")
		continue
	time_consume = timespan(stime)

	if not (resp.ok()):
		pass

		if resp.not_found():
			pass
			sys.stderr.write('not_found\n')
		else:
			pass
			s = resp.code

			if resp.message:
				pass
				s += (': ' + str(resp.message))
			sys.stderr.write((str(s) + '\n'))
		sys.stderr.write('(%.3f sec)\n'%(time_consume))
	else:
		pass
		skip = False

		# {{{ switch: cmd
		_continue_1 = False
		while True:
			if False or ((cmd) == 'ping') or ((cmd) == 'qset') or ((cmd) == 'compact') or ((cmd) == 'auth') or ((cmd) == 'set') or ((cmd) == 'setx') or ((cmd) == 'zset') or ((cmd) == 'hset') or ((cmd) == 'del') or ((cmd) == 'zdel') or ((cmd) == 'add_allow_ip') or ((cmd) == 'del_allow_ip') or ((cmd) == 'add_deny_ip') or ((cmd) == 'del_deny_ip'):
				pass
				skip = True
				sys.stdout.write((str(resp.code) + '\n'))
				break
			if False or ((cmd) == 'info'):
				pass
				skip = True
				is_val = False
				i = 1

				while i<len(resp.data):
					pass
					s = resp.data[i]

					if is_val:
						pass
						s = ('	' + s.replace('\n', '\n	'))
					print s
					is_val = not (is_val)
					pass
					i += 1
				sys.stderr.write('%d result(s) (%.3f sec)\n'%(len(resp.data), time_consume))
				break
			break
			if _continue_1:
				continue
		# }}} switch


		if skip:
			pass
			sys.stderr.write('(%.3f sec)\n'%(time_consume))
			continue

		# {{{ switch: resp.type
		_continue_1 = False
		while True:
			if False or ((resp.type) == 'none'):
				pass
				sys.stdout.write((repr_data(resp.data) + '\n'))
				break
			if False or ((resp.type) == 'val'):
				pass

				if resp.code=='ok':
					pass
					sys.stdout.write((repr_data(resp.data) + '\n'))
				else:
					pass

					if resp.data:
						pass
						print repr_data(resp.code), repr_data(resp.data)
					else:
						pass
						print repr_data(resp.code)
				break
			if False or ((resp.type) == 'list'):
				pass
				sys.stderr.write('  %15s\n'%('key'))
				sys.stderr.write(('-' * 17 + '\n'))

				_cpy_r_12 = _cpy_l_13 = resp.data
				if type(_cpy_r_12).__name__ == 'dict': _cpy_b_15=True; _cpy_l_13=_cpy_r_12.iterkeys()
				else: _cpy_b_15=False;
				for _cpy_k_14 in _cpy_l_13:
					if _cpy_b_15: k=_cpy_r_12[_cpy_k_14]
					else: k=_cpy_k_14
					pass
					sys.stdout.write('  %15s\n' % (repr_data(k)))
				sys.stderr.write('%d result(s) (%.3f sec)\n'%(len(resp.data), time_consume))
				break
			if False or ((resp.type) == 'map'):
				pass
				sys.stderr.write('%-15s %s\n'%('key', 'value'))
				sys.stderr.write(('-' * 25 + '\n'))

				_cpy_r_16 = _cpy_l_17 = resp.data['index']
				if type(_cpy_r_16).__name__ == 'dict': _cpy_b_19=True; _cpy_l_17=_cpy_r_16.iterkeys()
				else: _cpy_b_19=False;
				for _cpy_k_18 in _cpy_l_17:
					if _cpy_b_19: k=_cpy_r_16[_cpy_k_18]
					else: k=_cpy_k_18
					pass
					v = resp.data['items'][k]
					sys.stdout.write('  %-15s: %s\n' % (repr_data(k), repr_data(v)))
				sys.stderr.write('%d result(s) (%.3f sec)\n'%(len(resp.data['index']), time_consume))
				break
			break
			if _continue_1:
				continue
		# }}} switch

		sys.stderr.write('(%.3f sec)\n'%(time_consume))
