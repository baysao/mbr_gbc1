# encoding=utf-8
# Generated by cpy
# 2022-12-26 09:21:00.732210
import os, sys
from sys import stdin, stdout


def hclear(link, hname, verbose=True):
	pass
	ret = 0
	r = link.request('hclear', [hname])
	try:
		pass
		ret = r.data
	except Exception , e:
		pass
	return ret

def zclear(link, zname, verbose=True):
	pass
	ret = 0
	r = link.request('zclear', [zname])
	try:
		pass
		ret = r.data
	except Exception , e:
		pass
	return ret

def qclear(link, zname, verbose=True):
	pass
	ret = 0
	r = link.request('qclear', [zname])
	try:
		pass
		ret = r.data
	except Exception , e:
		pass
	return ret

def flushdb(link, data_type):
	pass
	resp = link.request('info')
	i = 1

	while i<len(resp.data):
		pass

		if resp.data[i]=='replication':
			pass
			raise Exception('flushdb is not allowed when replication is in use!')
		pass
		i += 2
	sys.stdout.write('\n')
	sys.stdout.write('============================ DANGER! ============================\n')
	sys.stdout.write('This operation is DANGEROUS and is not recoverable, if you\n')
	sys.stdout.write('really want to flush the whole db(delete ALL data in ssdb server),\n')
	sys.stdout.write('input \'yes\' and press Enter, or just press Enter to cancel\n')
	sys.stdout.write('\n')
	sys.stdout.write('flushdb will break replication states, you must fully understand\n')
	sys.stdout.write('the RISK before you doing this!\n')
	sys.stdout.write('\n')
	sys.stdout.write('> flushdb? ')
	line = sys.stdin.readline().strip()

	if line!='yes':
		pass
		sys.stdout.write('Operation cancelled.\n\n')
		return 
	print 'Begin to flushdb...\n'

	if data_type=='':
		pass
		resp = link.request('flushdb', [])

		if resp.code!='ok' and resp.code!='client_error':
			pass
			raise Exception(resp.message)
	batch = 1000
	d_kv = 0

	if (data_type=='' or data_type=='kv'):
		pass

		while True:
			pass
			resp = link.request('keys', ['', '', batch])

			if len(resp.data)==0:
				pass
				break
			d_kv += len(resp.data)
			link.request('multi_del', resp.data)
			sys.stdout.write('delete[kv  ] %d key(s).\n' % (d_kv))
	d_hash = 0
	d_hkeys = 0

	if (data_type=='' or data_type=='hash'):
		pass

		while True:
			pass
			resp = link.request('hlist', ['', '', batch])

			if len(resp.data)==0:
				pass
				break
			last_num = 0

			_cpy_r_0 = _cpy_l_1 = resp.data
			if type(_cpy_r_0).__name__ == 'dict': _cpy_b_3=True; _cpy_l_1=_cpy_r_0.iterkeys()
			else: _cpy_b_3=False;
			for _cpy_k_2 in _cpy_l_1:
				if _cpy_b_3: hname=_cpy_r_0[_cpy_k_2]
				else: hname=_cpy_k_2
				pass
				d_hash += 1
				deleted_num = hclear(link, hname, False)
				d_hkeys += deleted_num

				if (d_hkeys - last_num)>=batch:
					pass
					last_num = d_hkeys
					sys.stdout.write('delete[hash] %d hash(s), %d key(s).\n' % (d_hash, d_hkeys))

			if (d_hkeys - last_num)>=batch:
				pass
				sys.stdout.write('delete[hash] %d hash(s), %d key(s).\n' % (d_hash, d_hkeys))
		sys.stdout.write('delete[hash] %d hash(s), %d key(s).\n' % (d_hash, d_hkeys))
	d_zset = 0
	d_zkeys = 0

	if (data_type=='' or data_type=='zset'):
		pass

		while True:
			pass
			resp = link.request('zlist', ['', '', batch])

			if len(resp.data)==0:
				pass
				break
			last_num = 0

			_cpy_r_4 = _cpy_l_5 = resp.data
			if type(_cpy_r_4).__name__ == 'dict': _cpy_b_7=True; _cpy_l_5=_cpy_r_4.iterkeys()
			else: _cpy_b_7=False;
			for _cpy_k_6 in _cpy_l_5:
				if _cpy_b_7: zname=_cpy_r_4[_cpy_k_6]
				else: zname=_cpy_k_6
				pass
				d_zset += 1
				deleted_num = zclear(link, zname, False)
				d_zkeys += deleted_num

				if (d_zkeys - last_num)>=batch:
					pass
					last_num = d_zkeys
					sys.stdout.write('delete[zset] %d zset(s), %d key(s).\n' % (d_zset, d_zkeys))

			if (d_zkeys - last_num)>=batch:
				pass
				sys.stdout.write('delete[zset] %d zset(s), %d key(s).\n' % (d_zset, d_zkeys))
		sys.stdout.write('delete[zset] %d zset(s), %d key(s).\n' % (d_zset, d_zkeys))
	d_list = 0
	d_lkeys = 0

	if (data_type=='' or data_type=='list'):
		pass

		while True:
			pass
			resp = link.request('qlist', ['', '', batch])

			if len(resp.data)==0:
				pass
				break
			last_num = 0

			_cpy_r_8 = _cpy_l_9 = resp.data
			if type(_cpy_r_8).__name__ == 'dict': _cpy_b_11=True; _cpy_l_9=_cpy_r_8.iterkeys()
			else: _cpy_b_11=False;
			for _cpy_k_10 in _cpy_l_9:
				if _cpy_b_11: zname=_cpy_r_8[_cpy_k_10]
				else: zname=_cpy_k_10
				pass
				d_list += 1
				deleted_num = qclear(link, zname, False)
				d_lkeys += deleted_num

				if (d_zkeys - last_num)>=batch:
					pass
					last_num = d_lkeys
					sys.stdout.write('delete[list] %d list(s), %d key(s).\n' % (d_list, d_lkeys))

			if (d_lkeys - last_num)>=batch:
				pass
				sys.stdout.write('delete[list] %d list(s), %d key(s).\n' % (d_list, d_lkeys))
		sys.stdout.write('delete[list] %d list(s), %d key(s).\n' % (d_list, d_lkeys))
	sys.stdout.write('\n')
	sys.stdout.write('===== flushdb stats =====\n')

	if (data_type=='' or data_type=='kv'):
		pass
		sys.stdout.write('[kv]   %8d key(s).\n' % (d_kv))

	if (data_type=='' or data_type=='hash'):
		pass
		sys.stdout.write('[hash] %8d hash(s), %8d key(s).\n' % (d_hash, d_hkeys))

	if (data_type=='' or data_type=='zset'):
		pass
		sys.stdout.write('[zset] %8d zset(s), %8d key(s).\n' % (d_zset, d_zkeys))

	if (data_type=='' or data_type=='list'):
		pass
		sys.stdout.write('[list] %8d list(s), %8d key(s).\n' % (d_list, d_lkeys))
	sys.stdout.write('\n')
	sys.stdout.write('clear binlog\n')
	link.request('clear_binlog')
	sys.stdout.write('\n')
	sys.stdout.write('compacting...\n')
	link.request('compact')
	sys.stdout.write('done.\n')
	sys.stdout.write('\n')
