# encoding=utf-8
# Generated by cpy
# 2022-12-26 09:21:00.640092
import os, sys
from sys import stdin, stdout


def show_version(link):
	pass
	try:
		pass
		resp = link.request('info', [])

		if resp.code=='ok':
			pass

			if len(resp.data)>2:
				pass
				sys.stderr.write((((resp.data[0] + ' ') + resp.data[2]) + '\n\n'))
		else:
			pass
			sys.stderr.write((str(resp.message) + '\n'))

			if resp.code=='noauth':
				pass
			else:
				pass
				sys.exit(0)
	except Exception , e:
		pass
		sys.stderr.write((('Unexpected error: ' + str(e)) + '\n'))
		sys.exit(0)

def dbsize(link):
	pass
	resp = link.request('info', [])

	_cpy_r_0 = _cpy_l_1 = resp.data
	if type(_cpy_r_0).__name__ == 'dict': _cpy_b_3=True; _cpy_l_1=_cpy_r_0.iterkeys()
	else: _cpy_b_3=False;k=-1
	for _cpy_k_2 in _cpy_l_1:
		if _cpy_b_3: k=_cpy_k_2; v=_cpy_r_0[_cpy_k_2]
		else: k += 1; v=_cpy_k_2
		pass

		if v!='leveldb.stats':
			pass
			continue
		s = resp.data[(k + 1)]
		lines = s.strip().split('\n')
		lines = lines[3 : ]
		size = 0

		_cpy_r_4 = _cpy_l_5 = lines
		if type(_cpy_r_4).__name__ == 'dict': _cpy_b_7=True; _cpy_l_5=_cpy_r_4.iterkeys()
		else: _cpy_b_7=False;
		for _cpy_k_6 in _cpy_l_5:
			if _cpy_b_7: line=_cpy_r_4[_cpy_k_6]
			else: line=_cpy_k_6
			pass
			ps = line.split()
			size += int(ps[2])
		return size
	return 0
class SSDB_iterator_base(object):
	pass


	def __init__(this, link):
		this.link = None
		this.finish = False
		this.batch = 2
		this.index = []
		this.key = ''
		this.val = ''
		this.end = ''
		pass
		this.link = link

	def seek(this, s):
		pass
		this.key = s

	def set_range(this, s, e=''):
		pass
		this.key = s
		this.end = e

class SSDB_kv_scan(SSDB_iterator_base):
	pass


	def __init__(this, link):
		super(SSDB_kv_scan, this).__init__(link)
		this.items = []
		pass

	def next(this):
		pass

		if this.finish:
			pass
			return False

		if len(this.index)==0:
			pass
			resp = this.link.request('scan', [this.key, this.end, this.batch])

			if len(resp.data['index'])==0:
				pass
				this.finish = True
				return False
			this.index = resp.data['index']
			this.items = resp.data['items']
		this.key = this.index.pop(0)
		this.val = this.items[this.key]
		return True

class SSDB_hash_list(SSDB_iterator_base):
	pass


	def __init__(this, link):
		super(SSDB_hash_list, this).__init__(link)
		pass

	def next(this):
		pass

		if this.finish:
			pass
			return False

		if len(this.index)==0:
			pass
			resp = this.link.request('hlist', [this.key, this.end, this.batch])

			if len(resp.data)==0:
				pass
				this.finish = True
				return False
			this.index = resp.data
		this.key = this.index.pop(0)
		return True

class SSDB_zset_list(SSDB_iterator_base):
	pass


	def __init__(this, link):
		super(SSDB_zset_list, this).__init__(link)
		pass

	def next(this):
		pass

		if this.finish:
			pass
			return False

		if len(this.index)==0:
			pass
			resp = this.link.request('zlist', [this.key, this.end, this.batch])

			if len(resp.data)==0:
				pass
				this.finish = True
				return False
			this.index = resp.data
		this.key = this.index.pop(0)
		return True

class SSDB_queue_list(SSDB_iterator_base):
	pass


	def __init__(this, link):
		super(SSDB_queue_list, this).__init__(link)
		pass

	def next(this):
		pass

		if this.finish:
			pass
			return False

		if len(this.index)==0:
			pass
			resp = this.link.request('qlist', [this.key, this.end, this.batch])

			if len(resp.data)==0:
				pass
				this.finish = True
				return False
			this.index = resp.data
		this.key = this.index.pop(0)
		return True

class SSDB_hash_scan(SSDB_iterator_base):
	pass


	def __init__(this, link):
		super(SSDB_hash_scan, this).__init__(link)
		this.name = ''
		this.items = []
		pass

	def next(this):
		pass

		if this.finish:
			pass
			return False

		if len(this.index)==0:
			pass
			resp = this.link.request('hscan', [this.name, this.key, '', this.batch])

			if len(resp.data['index'])==0:
				pass
				this.finish = True
				return False
			this.index = resp.data['index']
			this.items = resp.data['items']
		this.key = this.index.pop(0)
		this.val = this.items[this.key]
		return True

class SSDB_zset_scan(SSDB_iterator_base):
	pass


	def __init__(this, link):
		super(SSDB_zset_scan, this).__init__(link)
		this.name = ''
		this.items = []
		pass

	def next(this):
		pass

		if this.finish:
			pass
			return False

		if len(this.index)==0:
			pass
			resp = this.link.request('zscan', [this.name, this.key, this.val, '', this.batch])

			if len(resp.data['index'])==0:
				pass
				this.finish = True
				return False
			this.index = resp.data['index']
			this.items = resp.data['items']
		this.key = this.index.pop(0)
		this.val = this.items[this.key]
		return True

class SSDB_queue_scan(SSDB_iterator_base):
	pass


	def __init__(this, link):
		super(SSDB_queue_scan, this).__init__(link)
		this.items = []
		this.offset = 0
		pass

	def next(this):
		pass

		if this.finish:
			pass
			return False

		if len(this.index)==0:
			pass
			resp = this.link.request('qrange', [this.name, this.offset, this.batch])

			if len(resp.data)==0:
				pass
				this.finish = True
				return False
			this.index = resp.data
		this.key = this.offset
		this.val = this.index.pop(0)
		this.offset += 1
		return True

